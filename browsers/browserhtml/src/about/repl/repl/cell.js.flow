/* @flow */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

import {Effects} from "reflex"
import type {Address, DOM} from "reflex"
import * as Input from './input';
import * as Output from './output';

export type ID = string

export type Model =
  { id: ID
  , input: Input.Model
  , output: Output.Model
  }


// @HACK: Not sure why but this specific type union very confusing for
// the flow. Only way to make it work was to make each type contain field width
// a different name or flow would try to match values types over wrong members
// of the union.
export type Action =
  | { type: "Remove"
    }
  | { type: "Print"
    , print: Output.Model
    }
  | { type: "Submit"
    , source: Input.Model
    }
  | { type: "Output"
    , output: Output.Action
    }
  | { type: "Input"
    , input: Input.Action
    }

declare export var Edit:Action

declare export function Print
  (output:Output.Model):
  Action

declare export function init
  (id:ID):
  [Model, Effects<Action>]

declare export function update
  (model:Model, action:Action):
  [Model, Effects<Action>]

declare export function render
  (model:Model, address:Address<Action>):
  DOM

declare export function view
  (model:Model, address:Address<Action>):
  DOM
