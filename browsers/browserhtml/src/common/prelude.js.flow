/* @flow */

import {Effects} from "reflex"

export type ID = string
export type URI = string
export type Time = number
export type Version = string
export type Integer = number
export type Float = number

declare export function merge <model:{}>
  (model:model, changes:{[key:string]: any}):
  model

declare export function take <item>
  (items:Array<item>, n:number):
  Array<item>

declare export function move <item>
  (items:Array<item>, from:number, to:number):
  Array<item>

declare export function remove <item>
  (items:Array<item>, index:number):
  Array<item>

declare export function setIn <item>
  (items:Array<item>, index:number, item:item):
  Array<item>

declare export function always <a>
  (a:a):
  () => a

declare export function batch <model, action>
  ( update:(model:model, action:action)=>[model, Effects<action>]
  , model:model
  , actions:Array<action>
  ):
  [model, Effects<action>]

export type Tagged <tag, kind>
  = { type: tag
    , source: kind
    }

declare export function tag <tag:string, kind>
  (tag:tag):
  (value:kind) => Tagged<tag, kind>

declare export function tagged <tag:string, kind>
  (tag:tag, value?:kind):
  Tagged<tag, kind>
