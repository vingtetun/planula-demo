From: Vivien Nicolas <vnicolas@mozilla.com>

diff --git a/browser/components/BrowserComponents.manifest b/browser/components/BrowserComponents.manifest
--- a/browser/components/BrowserComponents.manifest
+++ b/browser/components/BrowserComponents.manifest
@@ -18,16 +18,20 @@ contract @mozilla.org/uriloader/content-
 contract @mozilla.org/uriloader/content-handler;1?type=image/bmp {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 contract @mozilla.org/uriloader/content-handler;1?type=image/x-icon {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 contract @mozilla.org/uriloader/content-handler;1?type=image/vnd.microsoft.icon {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 contract @mozilla.org/uriloader/content-handler;1?type=application/http-index-format {5d0ce354-df01-421a-83fb-7ead0990c24e} application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 category command-line-handler m-browser @mozilla.org/browser/clh;1 application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 category command-line-handler x-default @mozilla.org/browser/final-clh;1 application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 category command-line-validator b-browser @mozilla.org/browser/clh;1 application={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
 
+# BrowserUIProtocolHandler.js
+component {ae18af0e-296f-11e6-9275-ebb75fefb05b} BrowserUIProtocolHandler.js
+contract @mozilla.org/network/protocol;1?name=browserui {ae18af0e-296f-11e6-9275-ebb75fefb05b}
+
 # nsBrowserGlue.js
 
 # This component must restrict its registration for the app-startup category
 # to the specific list of apps that use it so it doesn't get loaded in xpcshell.
 # Thus we restrict it to these apps:
 #
 #   b2g:            {3c2e2abc-06d4-11e1-ac3b-374f68613e61}
 #   browser:        {ec8030f7-c20a-464f-9b0e-13a3a9e97384}
diff --git a/browser/components/BrowserUIProtocolHandler.js b/browser/components/BrowserUIProtocolHandler.js
new file mode 100644
--- /dev/null
+++ b/browser/components/BrowserUIProtocolHandler.js
@@ -0,0 +1,195 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/**
+ * BrowserUIProtocolHandler.js
+ *
+ */
+
+"use strict";
+
+const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource://gre/modules/Services.jsm");
+
+Services.obs.addObserver(setURIAsDefaultUI, "set-default-ui", false);
+Services.obs.addObserver(resetDefaultUI, "reset-default-ui", false);
+
+[
+  'chrome-document-loaded',
+  'content-document-loaded',
+].forEach(function(name) {
+  Services.obs.addObserver(function(subject, topic, data) {
+    if (subject.defaultView instanceof Ci.nsIDOMChromeWindow &&
+        subject.location == Services.prefs.getCharPref('browser.chromeURL')) {
+      Services.obs.notifyObservers(null, 'new-chrome-loaded', null);
+    }
+  }, name, false);
+});
+
+
+function setURIAsDefaultUI(subject, topic, state) {
+  let uri = subject.QueryInterface(Ci.nsIURI);
+  let url = Services.io.newURI(uri.spec, null, null);
+
+  Preferences.set(url);
+  Permissions.set(url);
+  restart(url);
+}
+
+
+function resetDefaultUI(subject, topic, state) {
+  let uri = Services.io.newURI(Services.prefs.getCharPref("browser.chromeURL"), null, null);
+
+  Permissions.unset(uri);
+  Preferences.unset(uri);
+  restart(uri);
+}
+
+const Permissions = (function() {
+  const kPermissions = [
+    "browser",
+    "popup",
+    "embed-apps",
+    "systemXHR",
+    "root-window",
+    "browser:universal-xss"
+  ];
+
+  function add(uri, name) {
+    Services.perms.add(uri, name, Ci.nsIPermissionManager.ALLOW_ACTION);
+
+    let principal = Services.scriptSecurityManager.createCodebasePrincipal(uri, {});
+    Services.perms.addFromPrincipal(principal, name, Ci.nsIPermissionManager.ALLOW_ACTION);
+  }
+
+  function remove(uri, name) {
+    Services.perms.remove(uri, name);
+
+    let principal = Services.scriptSecurityManager.createCodebasePrincipal(uri, {});
+    Services.perms.removeFromPrincipal(principal, name);
+  }
+
+  return {
+    set: function(uri) {
+      kPermissions.forEach(function(name) { add(uri, name); });
+    },
+
+    unset: function(uri) {
+      kPermissions.forEach(function(name) { remove(uri, name); });
+    }
+  }
+})();
+
+const Preferences = (function() {
+  const kPreferences = [
+    //
+    // Additional dom apis
+    //
+    { name: "dom.webcomponents.enabled", value: true },
+    { name: "dom.mozBrowserFramesEnabled", value: true },
+    { name: "extensions.webextensions.addon_implementation", value: true },
+
+    //
+    // Extensions
+    //
+    { name: "extensions.autoDisableScopes", value: 0 },
+    { name: "xpinstall.signatures.required", value: false }
+  ];
+
+  function add(preference) {
+    let name = preference.name;
+    let value = preference.value;
+    switch (typeof value) {
+      case "boolean":
+        Services.prefs.setBoolPref(name, value);
+        break;
+
+      case "number":
+        Services.prefs.setIntPref(name, value);
+        break;
+ 
+      case "string":
+        Services.prefs.setCharPref(name, value);
+        break;
+    }
+  }
+
+  function remove(preference) {
+    Services.prefs.clearUserPref(preference.name);
+  }
+
+  return {
+    set: function(uri) {
+      kPreferences.forEach(function(preference) { add(preference); });
+      Services.prefs.setCharPref("browser.chromeURL", uri.spec);
+      Services.prefs.setCharPref("network.dns.localDomains", uri.host);
+    },
+
+    unset: function(uri) {
+      kPreferences.forEach(function(preference) { remove(preference); });
+      Services.prefs.clearUserPref("browser.chromeURL");
+      Services.prefs.clearUserPref("network.dns.localDomains");
+    }
+  }
+})();
+
+function restart(uri) {
+  //Cc["@mozilla.org/toolkit/app-startup;1"]
+  //  .getService(Ci.nsIAppStartup)
+  //  .quit(Ci.nsIAppStartup.eForceQuit | Ci.nsIAppStartup.eRestart);
+  Services.ww.activeWindow.document.location = uri.spec;
+  Services.prefs.savePrefFile(null); 
+}
+
+
+
+/*
+ * BrowserUIHandler
+ */
+function BrowserUIHandler() {
+}
+
+BrowserUIHandler.prototype = {
+  scheme: "browserui",
+  defaultPort: -1,
+  protocolFlags: Ci.nsIProtocolHandler.URI_NORELATIVE |
+                 Ci.nsIProtocolHandler.URI_NOAUTH |
+                 Ci.nsIProtocolHandler.URI_LOADABLE_BY_ANYONE |
+                 Ci.nsIProtocolHandler.URI_DOES_NOT_RETURN_DATA,
+  allowPort: () => false,
+
+  newURI: function Proto_newURI(aSpec, aOriginCharset) {
+    let uri = Cc["@mozilla.org/network/simple-uri;1"].createInstance(Ci.nsIURI);
+    uri.spec = aSpec;
+    return uri;
+  },
+
+  newChannel2: function Proto_newChannel(aURI, aLoadInfo) {
+    let url = Services.io.newURI("http:" + aURI.path, null, null);
+
+    if (url.path === "/") {
+      Services.obs.notifyObservers(null, "reset-default-ui", null);
+    } else {
+      Services.obs.notifyObservers(url, "set-default-ui", null);
+    } 
+
+    let ch = Services.io.newChannelFromURIWithLoadInfo(url, aLoadInfo);
+    ch.originalURI = aURI;
+    return ch;
+
+    //throw Components.results.NS_ERROR_ILLEGAL_VALUE;
+  },
+
+  newChannel: function Proto_newChannel(aURI) {
+    return this.newChannel2(aURI, null);
+  },
+
+  classID: Components.ID("{ae18af0e-296f-11e6-9275-ebb75fefb05b}"),
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIProtocolHandler])
+};
+
+this.NSGetFactory = XPCOMUtils.generateNSGetFactory([BrowserUIHandler]);
+
diff --git a/browser/components/moz.build b/browser/components/moz.build
--- a/browser/components/moz.build
+++ b/browser/components/moz.build
@@ -35,16 +35,17 @@ XPIDL_SOURCES += [
 
 XPIDL_MODULE = 'browsercompsbase'
 
 EXTRA_PP_COMPONENTS += [
     'BrowserComponents.manifest',
 ]
 
 EXTRA_COMPONENTS += [
+    'BrowserUIProtocolHandler.js',
     'nsBrowserContentHandler.js',
     'nsBrowserGlue.js',
 ]
 
 EXTRA_JS_MODULES += [
     'distribution.js',
 ]
 
