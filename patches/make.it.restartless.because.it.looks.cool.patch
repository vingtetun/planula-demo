From: Vivien Nicolas <vnicolas@mozilla.com>

diff --git a/browser/components/BrowserUIProtocolHandler.js b/browser/components/BrowserUIProtocolHandler.js
--- a/browser/components/BrowserUIProtocolHandler.js
+++ b/browser/components/BrowserUIProtocolHandler.js
@@ -12,32 +12,45 @@
 const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 
 Services.obs.addObserver(setURIAsDefaultUI, "set-default-ui", false);
 Services.obs.addObserver(resetDefaultUI, "reset-default-ui", false);
 
+[
+  'chrome-document-loaded',
+  'content-document-loaded',
+].forEach(function(name) {
+  Services.obs.addObserver(function(subject, topic, data) {
+    if (subject.defaultView instanceof Ci.nsIDOMChromeWindow &&
+        subject.location == Services.prefs.getCharPref('browser.chromeURL')) {
+      Services.obs.notifyObservers(null, 'new-chrome-loaded', null);
+    }
+  }, name, false);
+});
+
+
 function setURIAsDefaultUI(subject, topic, state) {
   let uri = subject.QueryInterface(Ci.nsIURI);
   let url = Services.io.newURI(uri.spec, null, null);
 
   Preferences.set(url);
   Permissions.set(url);
-  restart();
+  restart(url);
 }
 
 
 function resetDefaultUI(subject, topic, state) {
   let uri = Services.io.newURI(Services.prefs.getCharPref("browser.chromeURL"), null, null);
 
   Permissions.unset(uri);
   Preferences.unset(uri);
-  restart();
+  restart(uri);
 }
 
 const Permissions = (function() {
   const kPermissions = [
     "browser",
     "popup",
     "embed-apps",
     "systemXHR",
@@ -65,17 +78,16 @@ const Permissions = (function() {
 
 const Preferences = (function() {
   const kPreferences = [
     //
     // Additional dom apis
     //
     { name: "dom.webcomponents.enabled", value: true },
     { name: "dom.mozBrowserFramesEnabled", value: true },
-    { name: "dom.webextensions-uiglue.enabled", value: true },
     { name: "extensions.webextensions.addon_implementation", value: true },
 
     //
     // Extensions
     //
     { name: "extensions.autoDisableScopes", value: 0 },
     { name: "xpinstall.signatures.required", value: false }
   ];
@@ -112,20 +124,21 @@ const Preferences = (function() {
     unset: function(uri) {
       kPreferences.forEach(function(preference) { remove(preference); });
       Services.prefs.clearUserPref("browser.chromeURL");
       Services.prefs.clearUserPref("network.dns.localDomains");
     }
   }
 })();
 
-function restart() {
-  Cc["@mozilla.org/toolkit/app-startup;1"]
-    .getService(Ci.nsIAppStartup)
-    .quit(Ci.nsIAppStartup.eForceQuit | Ci.nsIAppStartup.eRestart);
+function restart(uri) {
+  //Cc["@mozilla.org/toolkit/app-startup;1"]
+  //  .getService(Ci.nsIAppStartup)
+  //  .quit(Ci.nsIAppStartup.eForceQuit | Ci.nsIAppStartup.eRestart);
+  Services.ww.activeWindow.document.location = uri.spec;
 }
 
 
 
 /*
  * BrowserUIHandler
  */
 function BrowserUIHandler() {
